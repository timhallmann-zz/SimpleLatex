let SimpleLatex=(function(){let matchingParentheses={"(":")",")":"(","[":"]","]":"[","{":"}","}":"{"};let functions={"%":10,"    ":"\\quad ","°":"\\degree ","hat":30,"bar":30,"dot":30,"ddot":30,"vec":30,"overline":30,"underline":30,"\\|":10,"\\b":"\\backslash ","lgroup":10,"rgroup":10,"lbrack":10,"rbrack":10,"lbrace":10,"rbrace":10,"lceil":10,"rceil":10,"lfloor":10,"rfloor":10,"urcorner":10,"llcorner":10,"lrcorner":10,"lmoustache":10,"rmoustache":10,"uparrow":10,"downarrow":10,"updownarrow":10,"Downarrow":10,"Updownarrow":10,"matrix":71,"pmatrix":71,"vmatrix":71,"Bmatrix":71,"bmatrix":71,"Vmatrix":71,"array":70,"darray":70,"aligned":70,"gathered":70,"cases":70,"dcases":70,"Gamma":10,"Delta":10,"Theta":10,"Lambda":10,"Xi":10,"Pi":10,"Sigma":10,"Upsilon":10,"Phi":10,"Psi":10,"Omega":10,"alpha":10,"beta":10,"gamma":10,"delta":10,"epsilon":10,"zeta":10,"eta":10,"theta":10,"iota":10,"kappa":10,"lambda":10,"mu":10,"nu":10,"xi":10,"omicron":10,"pi":10,"rho":10,"sigma":10,"tau":10,"upsilon":10,"phi":10,"chi":10,"psi":10,"omega":10,"varepsilon":10,"varkappa":10,"vartheta":10,"varpi":10,"varrho":10,"varsigma":10,"varphi":10,"digamma":10,"imath":10,"jmath":10,"aleph":10,"beth":10,"gimel":10,"daleth":10,"eth":10,"Finv":10,"Game":10,"ell":10,"hbar":10,"hslash":10,"Im":10,"Re":10,"wp":10,"partial":10,"nabla":10,"Bbbk":10,"infty":10,"cancel":30,"bcancel":30,"xcancel":30,"sout":30,"overbrace":30,"underbrace":30,"boxed":30,"llap":30,"rlap":40,"\\!":0,"\\,":0,"\\:":0,"\\;":0,"enspace":10,"qquad":10,"~":0,"space":10,"phantom":30,"kern":30,"stackrel":40,"overset":40,"underset":40,"atop":10,"forall":10,"exists":10,"nexists":10,"in":10,"notin":10,"nin":"\\notin ","ni":10,"complement":10,"subset":10,"supset":10,"mid":10,"land":10,"lor":10,"therefore":10,"because":10,"mapsto":10,"to":10,"gets":10,"leftrightarrow":10,"neg":10,"lnot":10,"implies":10,"impliedby":10,"iff":10,"emptyset":10,"varnothing":10,"\\N":"\\mathbb{N}","\\Z":"\\mathbb{Z}","\\Q":"\\mathbb{Q}","\\A":"\\mathbb{A}","\\R":"\\mathbb{R}","\\C":"\\mathbb{C}","\\H":"\\mathbb{H}","\\O":"\\mathbb{O}","\\S":"\\mathbb{S}","sum":50,"int":50,"iint":50,"iiint":50,"oint":50,"intop":50,"smallint":50,"prod":50,"coprod":50,"bigvee":50,"bigwedge":50,"bigcap":50,"bigcup":50,"bigsqcup":50,"bigotimes":50,"bigoplus":50,"bigodot":50,"biguplus":50,"mod":10,"binom":40,"choose":30,"dbinom":40,"tbinom":40,"pm":10,"mp":10,"times":10,"sqrt":60,"arcsin":10,"arccos":10,"arctan":10,"arctg":10,"arcctg":10,"arg":10,"ch":10,"cos":10,"cosec":10,"cosh":10,"cot":10,"cotg":10,"coth":10,"csc":10,"ctg":10,"cth":10,"deg":10,"dim":10,"exp":10,"hom":10,"ker":10,"lg":10,"ln":10,"log":51,"sec":10,"sin":10,"sinh":10,"sh":10,"tan":10,"tanh":10,"tg":10,"th":10,"det":51,"gcd":51,"inf":51,"lim":51,"liminf":51,"limsup":51,"max":51,"min":51,"Pr":51,"sup":51,"==":"\\equiv ","equiv":10,"~=":"\\approx ","approx":10,"approxeq":10,"asymp":10,"between":10,"<=":"\\leq","leq":10,"=>":"\\geq","geq":10,"owns":10,"parallel":10,"perp":10,"!=":"\\neq ","neq":10,"nparallel":10,"xrightarrow":60,"xleftarrow":60,"xleftrightarrow":60,"color":20,"textcolor":40,"mathrm":30,"textrm":30,"rm":30,"Huge":10,"huge ":10,"LARGE":10,"Large":10,"large":10,"normalsize":10,"small":10,"footnotesize":10,"scriptsize":10,"tiny":10,"displaystyle":10,"textstyle":10,"scriptstyle":10,"scriptscriptstyle":10,"text":20,"textnormal":20,"cdots":10,"ddots":10,"ldots":10,"vdots":10,"angle":10,"measuredangle":10,"sphericalangle":10,"checkmark":10,"diagdown":10,"diagup":10};let functionsSorted=Object.keys(functions).sort((a,b)=>{return b.length-a.length});function parseExpression(exp,arrayEnv=!1,andMatrixEnv=!1){if(exp==null||exp.length==0){return ""}if(exp.length>0&&exp.indexOf("\\l")==0){return exp.substring(2)}let tokens=[];let out="";let createNewToken=!0;let possibleFunctions=functionsSorted.filter((func)=>{return exp.indexOf(func)>-1});loop1:for(let i=0;i<exp.length;i++){let tokenLength=tokens.length;let lastToken=tokenLength-1;let expI=exp.substring(i);for(let j=0;j<possibleFunctions.length;j++){if(expI.indexOf(possibleFunctions[j])==0){let ans=parseFunction(expI,possibleFunctions[j]);i+=ans.l;if(!createNewToken){tokens[lastToken]+=ans.t}else{tokens.push(ans.t)}createNewToken=!1;continue loop1}}if(isOpeningParenthesis(exp[i])){let ans=getParentheseInterior(expI);i+=ans.i;if(ans.content.indexOf("\\l")==0){tokens.push(ans.content.substring(2))}else{tokens.push(ans.openingParenthesis+parseExpression(ans.content)+ans.closingParenthesis)}createNewToken=!0}else if(arrayEnv&&isRowSeparator(exp[i]+exp[i+1])||andMatrixEnv&&isColumnSeparator(exp[i])){if(i==0||i+1==exp.length||isColumnSeparator(tokens[lastToken])||isRowSeparator(tokens[lastToken])){if(isRowSeparator(exp[i]+exp[i+1])&&isColumnSeparator(tokens[lastToken])){tokens[lastToken]="\\\\"}}else if(isRowSeparator(exp[i]+exp[i+1])){tokens.push("\\\\")}else{tokens.push("&")}if(exp[i]=="\\"){i++}createNewToken=!0}else if(isSpecialOp(exp[i])){tokens.push(exp[i]);createNewToken=!0}else{if(!createNewToken){tokens[lastToken]+=exp[i]}else{tokens.push(exp[i])}createNewToken=!1}}for(let i=tokens.length-1;i>0;i--){if(tokens[i]=="^"||tokens[i]=="_"){let beginsWithMinus=1;if(tokens[i+1]=="-"){beginsWithMinus=2}tokens[i]=maybeParenthese(tokens[i-1])+tokens[i]+"{"+(beginsWithMinus==2?"-":"")+stripParenthese(tokens[i+beginsWithMinus])+"}";tokens.splice(i-1,1);tokens.splice(i,beginsWithMinus);i-=beginsWithMinus}}for(let i=0;i<tokens.length;i++){if(tokens[i]=="/"){let beginsWithMinus=1;if(tokens[i+1]=="-"){beginsWithMinus=2}tokens[i]="\\frac{"+stripParenthese(tokens[i-1])+"}{"+(beginsWithMinus==2?"-":"")+stripParenthese(tokens[i+beginsWithMinus])+"}";tokens.splice(i-1,1);tokens.splice(i,beginsWithMinus);i-=beginsWithMinus}}for(let i=0;i<tokens.length;i++){if(andMatrixEnv){out+=stripParenthese(tokens[i])}else{out+=maybeParenthese(tokens[i])}}return out}function parseFunction(exp,func){let i=func.length;let token;let arg;let args=[];if(functions[func]>=20&&isOpeningParenthesis(exp[i])){let interior=getParentheseInterior(exp.substring(i));i+=interior.i+1;arg=interior.content;args=splitArgs(arg)}switch(functions[func]){case 0:token=func+" ";break;case 10:token="\\"+func+" ";break;case 20:token="\\"+func+"{"+(arg==null?"":arg)+"}";break;case 30:token="\\"+func+"{"+parseExpression(arg)+"}";break;case 40:token="\\"+func+"{"+parseExpression(args[0])+"}{"+parseExpression(args[1])+"}";break;case 50:token="\\"+func+"_{"+parseExpression(args[0])+"}^{"+parseExpression(args[1])+"}";break;case 51:token="\\"+func+"_{"+parseExpression(args[0])+"}";break;case 60:token="\\"+func+"["+parseExpression(args[1])+"]{"+parseExpression(args[0])+"}";break;case 70:token="\\begin{"+func+"}{"+parseExpression(args[1])+"}"+parseExpression(args[0],!0)+"\\end{"+func+"}";break;case 71:token="\\begin{"+func+"}"+parseExpression(arg,!0,!0)+"\\end{"+func+"}";break;default:token=functions[func]}return{l:i-1,t:token}}function getParentheseInterior(exp){let openingParenthesis=exp[0];let closingParenthesis=matchingParentheses[openingParenthesis];let content="";let parentheses=1;let i=1;while(parentheses>0&&i<exp.length){if(exp[i]==closingParenthesis){parentheses--}else if(exp[i]==openingParenthesis){parentheses++}if(parentheses>0){content+=exp[i];i++}}return{i:i,content:content,openingParenthesis:openingParenthesis,closingParenthesis:closingParenthesis}}function splitArgs(exp){let args=[];let parentheses=0;let temp="";for(let i=0;i<exp.length;i++){if(isOpeningParenthesis(exp[i])){let ans=getParentheseInterior(exp.substring(i));i+=ans.i;temp+=ans.openingParenthesis+ans.content+ans.closingParenthesis}else if(exp[i]==","){args.push(temp);temp=""}else{temp+=exp[i]}}args.push(temp);return args}function isSpecialOp(exp){return/[^0-9a-z!°]/i.test(exp)}function isOpeningParenthesis(exp){return exp=="("||exp=="["||exp=="{"}function stripParenthese(exp=""){let end=exp.length-1;if(isOpeningParenthesis(exp[0])&&exp[end]==matchingParentheses[exp[0]]){exp=exp.substring(1,end)}return exp}function maybeParenthese(exp=""){let end=exp.length-1;if(isOpeningParenthesis(exp[0])&&exp[end]==matchingParentheses[exp[0]]){exp="\\left"+(exp[0]=="{"?"\\":"")+exp.substring(0,end)+"\\right"+(exp[end]=="}"?"\\":"")+exp[end]}return exp}function isRowSeparator(exp=""){return exp=="\\\\"||exp[0]=="\n"}function isColumnSeparator(exp){return exp==" "||exp=="&"}return parseExpression})()